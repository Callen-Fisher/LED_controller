
LED_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000888  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08000948  08000948  00010948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080009a0  080009a0  000109a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080009a4  080009a4  000109a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000109a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000000  080009a8  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000020  080009a8  00020020  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000109a8  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000d2d  00000000  00000000  000109d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000551  00000000  00000000  000116fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000130  00000000  00000000  00011c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00011d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000009df  00000000  00000000  00011e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000045f  00000000  00000000  00012837  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00012c96  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000002a8  00000000  00000000  00012d14  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00012fbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000930 	.word	0x08000930

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000930 	.word	0x08000930

08000108 <init_LEDs>:
 *      Author: cal
 */
#include "LED.h"

void init_LEDs(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
	GPIOB->MODER |= (GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0 | GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0 |
 800010c:	4b04      	ldr	r3, [pc, #16]	; (8000120 <init_LEDs+0x18>)
 800010e:	4a04      	ldr	r2, [pc, #16]	; (8000120 <init_LEDs+0x18>)
 8000110:	6812      	ldr	r2, [r2, #0]
 8000112:	4904      	ldr	r1, [pc, #16]	; (8000124 <init_LEDs+0x1c>)
 8000114:	430a      	orrs	r2, r1
 8000116:	601a      	str	r2, [r3, #0]
	        GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0 | GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0);
}
 8000118:	46c0      	nop			; (mov r8, r8)
 800011a:	46bd      	mov	sp, r7
 800011c:	bd80      	pop	{r7, pc}
 800011e:	46c0      	nop			; (mov r8, r8)
 8000120:	48000400 	.word	0x48000400
 8000124:	00005555 	.word	0x00005555

08000128 <light_on>:



void light_on(uint8_t LED)
{
 8000128:	b580      	push	{r7, lr}
 800012a:	b082      	sub	sp, #8
 800012c:	af00      	add	r7, sp, #0
 800012e:	0002      	movs	r2, r0
 8000130:	1dfb      	adds	r3, r7, #7
 8000132:	701a      	strb	r2, [r3, #0]
	switch(LED){
 8000134:	1dfb      	adds	r3, r7, #7
 8000136:	781b      	ldrb	r3, [r3, #0]
 8000138:	2b07      	cmp	r3, #7
 800013a:	d83c      	bhi.n	80001b6 <light_on+0x8e>
 800013c:	009a      	lsls	r2, r3, #2
 800013e:	4b20      	ldr	r3, [pc, #128]	; (80001c0 <light_on+0x98>)
 8000140:	18d3      	adds	r3, r2, r3
 8000142:	681b      	ldr	r3, [r3, #0]
 8000144:	469f      	mov	pc, r3
		case 0:
			GPIOB->ODR=GPIOB->ODR|0b1;
 8000146:	4b1f      	ldr	r3, [pc, #124]	; (80001c4 <light_on+0x9c>)
 8000148:	4a1e      	ldr	r2, [pc, #120]	; (80001c4 <light_on+0x9c>)
 800014a:	6952      	ldr	r2, [r2, #20]
 800014c:	2101      	movs	r1, #1
 800014e:	430a      	orrs	r2, r1
 8000150:	615a      	str	r2, [r3, #20]
			break;
 8000152:	e031      	b.n	80001b8 <light_on+0x90>
		case 1:
			GPIOB->ODR=GPIOB->ODR|0b10;
 8000154:	4b1b      	ldr	r3, [pc, #108]	; (80001c4 <light_on+0x9c>)
 8000156:	4a1b      	ldr	r2, [pc, #108]	; (80001c4 <light_on+0x9c>)
 8000158:	6952      	ldr	r2, [r2, #20]
 800015a:	2102      	movs	r1, #2
 800015c:	430a      	orrs	r2, r1
 800015e:	615a      	str	r2, [r3, #20]
			break;
 8000160:	e02a      	b.n	80001b8 <light_on+0x90>
		case 2:
			GPIOB->ODR=GPIOB->ODR|0b100;
 8000162:	4b18      	ldr	r3, [pc, #96]	; (80001c4 <light_on+0x9c>)
 8000164:	4a17      	ldr	r2, [pc, #92]	; (80001c4 <light_on+0x9c>)
 8000166:	6952      	ldr	r2, [r2, #20]
 8000168:	2104      	movs	r1, #4
 800016a:	430a      	orrs	r2, r1
 800016c:	615a      	str	r2, [r3, #20]
			break;
 800016e:	e023      	b.n	80001b8 <light_on+0x90>
		case 3:
			GPIOB->ODR=GPIOB->ODR|0b1000;
 8000170:	4b14      	ldr	r3, [pc, #80]	; (80001c4 <light_on+0x9c>)
 8000172:	4a14      	ldr	r2, [pc, #80]	; (80001c4 <light_on+0x9c>)
 8000174:	6952      	ldr	r2, [r2, #20]
 8000176:	2108      	movs	r1, #8
 8000178:	430a      	orrs	r2, r1
 800017a:	615a      	str	r2, [r3, #20]
			break;
 800017c:	e01c      	b.n	80001b8 <light_on+0x90>
		case 4:
			GPIOB->ODR=GPIOB->ODR|0b10000;
 800017e:	4b11      	ldr	r3, [pc, #68]	; (80001c4 <light_on+0x9c>)
 8000180:	4a10      	ldr	r2, [pc, #64]	; (80001c4 <light_on+0x9c>)
 8000182:	6952      	ldr	r2, [r2, #20]
 8000184:	2110      	movs	r1, #16
 8000186:	430a      	orrs	r2, r1
 8000188:	615a      	str	r2, [r3, #20]
			break;
 800018a:	e015      	b.n	80001b8 <light_on+0x90>
		case 5:
			GPIOB->ODR=GPIOB->ODR|0b100000;
 800018c:	4b0d      	ldr	r3, [pc, #52]	; (80001c4 <light_on+0x9c>)
 800018e:	4a0d      	ldr	r2, [pc, #52]	; (80001c4 <light_on+0x9c>)
 8000190:	6952      	ldr	r2, [r2, #20]
 8000192:	2120      	movs	r1, #32
 8000194:	430a      	orrs	r2, r1
 8000196:	615a      	str	r2, [r3, #20]
			break;
 8000198:	e00e      	b.n	80001b8 <light_on+0x90>
		case 6:
			GPIOB->ODR=GPIOB->ODR|0b1000000;
 800019a:	4b0a      	ldr	r3, [pc, #40]	; (80001c4 <light_on+0x9c>)
 800019c:	4a09      	ldr	r2, [pc, #36]	; (80001c4 <light_on+0x9c>)
 800019e:	6952      	ldr	r2, [r2, #20]
 80001a0:	2140      	movs	r1, #64	; 0x40
 80001a2:	430a      	orrs	r2, r1
 80001a4:	615a      	str	r2, [r3, #20]
			break;
 80001a6:	e007      	b.n	80001b8 <light_on+0x90>
		case 7:
			GPIOB->ODR=GPIOB->ODR|0b10000000;
 80001a8:	4b06      	ldr	r3, [pc, #24]	; (80001c4 <light_on+0x9c>)
 80001aa:	4a06      	ldr	r2, [pc, #24]	; (80001c4 <light_on+0x9c>)
 80001ac:	6952      	ldr	r2, [r2, #20]
 80001ae:	2180      	movs	r1, #128	; 0x80
 80001b0:	430a      	orrs	r2, r1
 80001b2:	615a      	str	r2, [r3, #20]
			break;
 80001b4:	e000      	b.n	80001b8 <light_on+0x90>
		default:
			break;
 80001b6:	46c0      	nop			; (mov r8, r8)
	}

}
 80001b8:	46c0      	nop			; (mov r8, r8)
 80001ba:	46bd      	mov	sp, r7
 80001bc:	b002      	add	sp, #8
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	08000960 	.word	0x08000960
 80001c4:	48000400 	.word	0x48000400

080001c8 <light_off>:

void light_off(uint8_t LED)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	0002      	movs	r2, r0
 80001d0:	1dfb      	adds	r3, r7, #7
 80001d2:	701a      	strb	r2, [r3, #0]
	switch(LED){
 80001d4:	1dfb      	adds	r3, r7, #7
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	2b07      	cmp	r3, #7
 80001da:	d83c      	bhi.n	8000256 <light_off+0x8e>
 80001dc:	009a      	lsls	r2, r3, #2
 80001de:	4b20      	ldr	r3, [pc, #128]	; (8000260 <light_off+0x98>)
 80001e0:	18d3      	adds	r3, r2, r3
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	469f      	mov	pc, r3
		case 0:
			GPIOB->ODR=GPIOB->ODR&0b11111110;
 80001e6:	4b1f      	ldr	r3, [pc, #124]	; (8000264 <light_off+0x9c>)
 80001e8:	4a1e      	ldr	r2, [pc, #120]	; (8000264 <light_off+0x9c>)
 80001ea:	6952      	ldr	r2, [r2, #20]
 80001ec:	21fe      	movs	r1, #254	; 0xfe
 80001ee:	400a      	ands	r2, r1
 80001f0:	615a      	str	r2, [r3, #20]
			break;
 80001f2:	e031      	b.n	8000258 <light_off+0x90>
		case 1:
			GPIOB->ODR=GPIOB->ODR&0b11111101;
 80001f4:	4b1b      	ldr	r3, [pc, #108]	; (8000264 <light_off+0x9c>)
 80001f6:	4a1b      	ldr	r2, [pc, #108]	; (8000264 <light_off+0x9c>)
 80001f8:	6952      	ldr	r2, [r2, #20]
 80001fa:	21fd      	movs	r1, #253	; 0xfd
 80001fc:	400a      	ands	r2, r1
 80001fe:	615a      	str	r2, [r3, #20]
			break;
 8000200:	e02a      	b.n	8000258 <light_off+0x90>
		case 2:
			GPIOB->ODR=GPIOB->ODR&0b11111011;
 8000202:	4b18      	ldr	r3, [pc, #96]	; (8000264 <light_off+0x9c>)
 8000204:	4a17      	ldr	r2, [pc, #92]	; (8000264 <light_off+0x9c>)
 8000206:	6952      	ldr	r2, [r2, #20]
 8000208:	21fb      	movs	r1, #251	; 0xfb
 800020a:	400a      	ands	r2, r1
 800020c:	615a      	str	r2, [r3, #20]
			break;
 800020e:	e023      	b.n	8000258 <light_off+0x90>
		case 3:
			GPIOB->ODR=GPIOB->ODR&0b11110111;
 8000210:	4b14      	ldr	r3, [pc, #80]	; (8000264 <light_off+0x9c>)
 8000212:	4a14      	ldr	r2, [pc, #80]	; (8000264 <light_off+0x9c>)
 8000214:	6952      	ldr	r2, [r2, #20]
 8000216:	21f7      	movs	r1, #247	; 0xf7
 8000218:	400a      	ands	r2, r1
 800021a:	615a      	str	r2, [r3, #20]
			break;
 800021c:	e01c      	b.n	8000258 <light_off+0x90>
		case 4:
			GPIOB->ODR=GPIOB->ODR&0b11101111;
 800021e:	4b11      	ldr	r3, [pc, #68]	; (8000264 <light_off+0x9c>)
 8000220:	4a10      	ldr	r2, [pc, #64]	; (8000264 <light_off+0x9c>)
 8000222:	6952      	ldr	r2, [r2, #20]
 8000224:	21ef      	movs	r1, #239	; 0xef
 8000226:	400a      	ands	r2, r1
 8000228:	615a      	str	r2, [r3, #20]
			break;
 800022a:	e015      	b.n	8000258 <light_off+0x90>
		case 5:
			GPIOB->ODR=GPIOB->ODR&0b11011111;
 800022c:	4b0d      	ldr	r3, [pc, #52]	; (8000264 <light_off+0x9c>)
 800022e:	4a0d      	ldr	r2, [pc, #52]	; (8000264 <light_off+0x9c>)
 8000230:	6952      	ldr	r2, [r2, #20]
 8000232:	21df      	movs	r1, #223	; 0xdf
 8000234:	400a      	ands	r2, r1
 8000236:	615a      	str	r2, [r3, #20]
			break;
 8000238:	e00e      	b.n	8000258 <light_off+0x90>
		case 6:
			GPIOB->ODR=GPIOB->ODR&0b10111111;
 800023a:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <light_off+0x9c>)
 800023c:	4a09      	ldr	r2, [pc, #36]	; (8000264 <light_off+0x9c>)
 800023e:	6952      	ldr	r2, [r2, #20]
 8000240:	21bf      	movs	r1, #191	; 0xbf
 8000242:	400a      	ands	r2, r1
 8000244:	615a      	str	r2, [r3, #20]
			break;
 8000246:	e007      	b.n	8000258 <light_off+0x90>
		case 7:
			GPIOB->ODR=GPIOB->ODR&0b01111111;
 8000248:	4b06      	ldr	r3, [pc, #24]	; (8000264 <light_off+0x9c>)
 800024a:	4a06      	ldr	r2, [pc, #24]	; (8000264 <light_off+0x9c>)
 800024c:	6952      	ldr	r2, [r2, #20]
 800024e:	217f      	movs	r1, #127	; 0x7f
 8000250:	400a      	ands	r2, r1
 8000252:	615a      	str	r2, [r3, #20]
			break;
 8000254:	e000      	b.n	8000258 <light_off+0x90>
		default:
			break;
 8000256:	46c0      	nop			; (mov r8, r8)

	}
}
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46bd      	mov	sp, r7
 800025c:	b002      	add	sp, #8
 800025e:	bd80      	pop	{r7, pc}
 8000260:	08000980 	.word	0x08000980
 8000264:	48000400 	.word	0x48000400

08000268 <init_push_buttons>:
 *      Author: cal
 */

#include "PB.h"

void init_push_buttons(void) {
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  RCC->AHBENR |= RCC_AHBENR_GPIOAEN; //enable clock for push-buttons
 800026c:	4b24      	ldr	r3, [pc, #144]	; (8000300 <init_push_buttons+0x98>)
 800026e:	4a24      	ldr	r2, [pc, #144]	; (8000300 <init_push_buttons+0x98>)
 8000270:	6952      	ldr	r2, [r2, #20]
 8000272:	2180      	movs	r1, #128	; 0x80
 8000274:	0289      	lsls	r1, r1, #10
 8000276:	430a      	orrs	r2, r1
 8000278:	615a      	str	r2, [r3, #20]
  // set pins to inputs
  GPIOA->MODER &= ~GPIO_MODER_MODER0; //set PA0 to input
 800027a:	2390      	movs	r3, #144	; 0x90
 800027c:	05db      	lsls	r3, r3, #23
 800027e:	2290      	movs	r2, #144	; 0x90
 8000280:	05d2      	lsls	r2, r2, #23
 8000282:	6812      	ldr	r2, [r2, #0]
 8000284:	2103      	movs	r1, #3
 8000286:	438a      	bics	r2, r1
 8000288:	601a      	str	r2, [r3, #0]
  GPIOA->MODER &= ~GPIO_MODER_MODER1; //set PA1 to input
 800028a:	2390      	movs	r3, #144	; 0x90
 800028c:	05db      	lsls	r3, r3, #23
 800028e:	2290      	movs	r2, #144	; 0x90
 8000290:	05d2      	lsls	r2, r2, #23
 8000292:	6812      	ldr	r2, [r2, #0]
 8000294:	210c      	movs	r1, #12
 8000296:	438a      	bics	r2, r1
 8000298:	601a      	str	r2, [r3, #0]
  GPIOA->MODER &= ~GPIO_MODER_MODER2; //set PA2 to input
 800029a:	2390      	movs	r3, #144	; 0x90
 800029c:	05db      	lsls	r3, r3, #23
 800029e:	2290      	movs	r2, #144	; 0x90
 80002a0:	05d2      	lsls	r2, r2, #23
 80002a2:	6812      	ldr	r2, [r2, #0]
 80002a4:	2130      	movs	r1, #48	; 0x30
 80002a6:	438a      	bics	r2, r1
 80002a8:	601a      	str	r2, [r3, #0]
  GPIOA->MODER &= ~GPIO_MODER_MODER3; //set PA3 to input
 80002aa:	2390      	movs	r3, #144	; 0x90
 80002ac:	05db      	lsls	r3, r3, #23
 80002ae:	2290      	movs	r2, #144	; 0x90
 80002b0:	05d2      	lsls	r2, r2, #23
 80002b2:	6812      	ldr	r2, [r2, #0]
 80002b4:	21c0      	movs	r1, #192	; 0xc0
 80002b6:	438a      	bics	r2, r1
 80002b8:	601a      	str	r2, [r3, #0]
  // enable pull-down resistors
  GPIOA->PUPDR |= GPIO_PUPDR_PUPDR0_0; //enable pull up for PA0
 80002ba:	2390      	movs	r3, #144	; 0x90
 80002bc:	05db      	lsls	r3, r3, #23
 80002be:	2290      	movs	r2, #144	; 0x90
 80002c0:	05d2      	lsls	r2, r2, #23
 80002c2:	68d2      	ldr	r2, [r2, #12]
 80002c4:	2101      	movs	r1, #1
 80002c6:	430a      	orrs	r2, r1
 80002c8:	60da      	str	r2, [r3, #12]
  GPIOA->PUPDR |= GPIO_PUPDR_PUPDR1_0; //enable pull up for PA1
 80002ca:	2390      	movs	r3, #144	; 0x90
 80002cc:	05db      	lsls	r3, r3, #23
 80002ce:	2290      	movs	r2, #144	; 0x90
 80002d0:	05d2      	lsls	r2, r2, #23
 80002d2:	68d2      	ldr	r2, [r2, #12]
 80002d4:	2104      	movs	r1, #4
 80002d6:	430a      	orrs	r2, r1
 80002d8:	60da      	str	r2, [r3, #12]
  GPIOA->PUPDR |= GPIO_PUPDR_PUPDR2_0; //enable pull up for PA2
 80002da:	2390      	movs	r3, #144	; 0x90
 80002dc:	05db      	lsls	r3, r3, #23
 80002de:	2290      	movs	r2, #144	; 0x90
 80002e0:	05d2      	lsls	r2, r2, #23
 80002e2:	68d2      	ldr	r2, [r2, #12]
 80002e4:	2110      	movs	r1, #16
 80002e6:	430a      	orrs	r2, r1
 80002e8:	60da      	str	r2, [r3, #12]
  GPIOA->PUPDR |= GPIO_PUPDR_PUPDR3_0; //enable pull up for PA3
 80002ea:	2390      	movs	r3, #144	; 0x90
 80002ec:	05db      	lsls	r3, r3, #23
 80002ee:	2290      	movs	r2, #144	; 0x90
 80002f0:	05d2      	lsls	r2, r2, #23
 80002f2:	68d2      	ldr	r2, [r2, #12]
 80002f4:	2140      	movs	r1, #64	; 0x40
 80002f6:	430a      	orrs	r2, r1
 80002f8:	60da      	str	r2, [r3, #12]
}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	40021000 	.word	0x40021000

08000304 <get_button_state>:

uint8_t get_button_state(uint8_t button)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	0002      	movs	r2, r0
 800030c:	1dfb      	adds	r3, r7, #7
 800030e:	701a      	strb	r2, [r3, #0]
	uint8_t val=0;
 8000310:	230f      	movs	r3, #15
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	2200      	movs	r2, #0
 8000316:	701a      	strb	r2, [r3, #0]
	switch(button){
 8000318:	1dfb      	adds	r3, r7, #7
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d013      	beq.n	8000348 <get_button_state+0x44>
 8000320:	dc02      	bgt.n	8000328 <get_button_state+0x24>
 8000322:	2b00      	cmp	r3, #0
 8000324:	d005      	beq.n	8000332 <get_button_state+0x2e>
		case 3:
			if((GPIOA->IDR & GPIO_IDR_3)==0)
				val=1;
			break;
		default:
			break;
 8000326:	e037      	b.n	8000398 <get_button_state+0x94>
	switch(button){
 8000328:	2b02      	cmp	r3, #2
 800032a:	d018      	beq.n	800035e <get_button_state+0x5a>
 800032c:	2b03      	cmp	r3, #3
 800032e:	d021      	beq.n	8000374 <get_button_state+0x70>
			break;
 8000330:	e032      	b.n	8000398 <get_button_state+0x94>
			if((GPIOA->IDR & GPIO_IDR_0)==0)
 8000332:	2390      	movs	r3, #144	; 0x90
 8000334:	05db      	lsls	r3, r3, #23
 8000336:	691b      	ldr	r3, [r3, #16]
 8000338:	2201      	movs	r2, #1
 800033a:	4013      	ands	r3, r2
 800033c:	d125      	bne.n	800038a <get_button_state+0x86>
				val=1;
 800033e:	230f      	movs	r3, #15
 8000340:	18fb      	adds	r3, r7, r3
 8000342:	2201      	movs	r2, #1
 8000344:	701a      	strb	r2, [r3, #0]
			break;
 8000346:	e020      	b.n	800038a <get_button_state+0x86>
			if((GPIOA->IDR & GPIO_IDR_1)==0)
 8000348:	2390      	movs	r3, #144	; 0x90
 800034a:	05db      	lsls	r3, r3, #23
 800034c:	691b      	ldr	r3, [r3, #16]
 800034e:	2202      	movs	r2, #2
 8000350:	4013      	ands	r3, r2
 8000352:	d11c      	bne.n	800038e <get_button_state+0x8a>
				val=1;
 8000354:	230f      	movs	r3, #15
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	2201      	movs	r2, #1
 800035a:	701a      	strb	r2, [r3, #0]
			break;
 800035c:	e017      	b.n	800038e <get_button_state+0x8a>
			if((GPIOA->IDR & GPIO_IDR_2)==0)
 800035e:	2390      	movs	r3, #144	; 0x90
 8000360:	05db      	lsls	r3, r3, #23
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	2204      	movs	r2, #4
 8000366:	4013      	ands	r3, r2
 8000368:	d113      	bne.n	8000392 <get_button_state+0x8e>
				val=1;
 800036a:	230f      	movs	r3, #15
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	2201      	movs	r2, #1
 8000370:	701a      	strb	r2, [r3, #0]
			break;
 8000372:	e00e      	b.n	8000392 <get_button_state+0x8e>
			if((GPIOA->IDR & GPIO_IDR_3)==0)
 8000374:	2390      	movs	r3, #144	; 0x90
 8000376:	05db      	lsls	r3, r3, #23
 8000378:	691b      	ldr	r3, [r3, #16]
 800037a:	2208      	movs	r2, #8
 800037c:	4013      	ands	r3, r2
 800037e:	d10a      	bne.n	8000396 <get_button_state+0x92>
				val=1;
 8000380:	230f      	movs	r3, #15
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	2201      	movs	r2, #1
 8000386:	701a      	strb	r2, [r3, #0]
			break;
 8000388:	e005      	b.n	8000396 <get_button_state+0x92>
			break;
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	e004      	b.n	8000398 <get_button_state+0x94>
			break;
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	e002      	b.n	8000398 <get_button_state+0x94>
			break;
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	e000      	b.n	8000398 <get_button_state+0x94>
			break;
 8000396:	46c0      	nop			; (mov r8, r8)
	}
	return val;
 8000398:	230f      	movs	r3, #15
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	781b      	ldrb	r3, [r3, #0]
}
 800039e:	0018      	movs	r0, r3
 80003a0:	46bd      	mov	sp, r7
 80003a2:	b004      	add	sp, #16
 80003a4:	bd80      	pop	{r7, pc}

080003a6 <lcd_string>:
static void lcd_put (uint8_t character, enum TypeOfCharacter ch_type);
static void lcd_write4bits(uint8_t value);

//============================================================================

void lcd_string(uint8_t *string_to_print) {
 80003a6:	b580      	push	{r7, lr}
 80003a8:	b084      	sub	sp, #16
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	6078      	str	r0, [r7, #4]
  uint32_t count=0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60fb      	str	r3, [r7, #12]
  while (string_to_print[count] != 0) {
 80003b2:	e00d      	b.n	80003d0 <lcd_string+0x2a>
    lcd_put (string_to_print[count], TEXT);
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	18d3      	adds	r3, r2, r3
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2101      	movs	r1, #1
 80003be:	0018      	movs	r0, r3
 80003c0:	f000 f8a2 	bl	8000508 <lcd_put>
    delay(43); // a DRAM write requires at least 43 us execution time
 80003c4:	202b      	movs	r0, #43	; 0x2b
 80003c6:	f000 f937 	bl	8000638 <delay>
    count++;
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	3301      	adds	r3, #1
 80003ce:	60fb      	str	r3, [r7, #12]
  while (string_to_print[count] != 0) {
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	18d3      	adds	r3, r2, r3
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d1eb      	bne.n	80003b4 <lcd_string+0xe>
  }
}
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	b004      	add	sp, #16
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <lcd_init>:
  lcd_string(line2);
}

//============================================================================

void lcd_init () {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /*This function sets up the port lines for the LCD and initializes
  the LCD module for use.*/
  // set the relevant pins to outputs
  RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80003e8:	4b37      	ldr	r3, [pc, #220]	; (80004c8 <lcd_init+0xe4>)
 80003ea:	4a37      	ldr	r2, [pc, #220]	; (80004c8 <lcd_init+0xe4>)
 80003ec:	6952      	ldr	r2, [r2, #20]
 80003ee:	2180      	movs	r1, #128	; 0x80
 80003f0:	0309      	lsls	r1, r1, #12
 80003f2:	430a      	orrs	r2, r1
 80003f4:	615a      	str	r2, [r3, #20]
  RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80003f6:	4b34      	ldr	r3, [pc, #208]	; (80004c8 <lcd_init+0xe4>)
 80003f8:	4a33      	ldr	r2, [pc, #204]	; (80004c8 <lcd_init+0xe4>)
 80003fa:	6952      	ldr	r2, [r2, #20]
 80003fc:	2180      	movs	r1, #128	; 0x80
 80003fe:	02c9      	lsls	r1, r1, #11
 8000400:	430a      	orrs	r2, r1
 8000402:	615a      	str	r2, [r3, #20]
  RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000404:	4b30      	ldr	r3, [pc, #192]	; (80004c8 <lcd_init+0xe4>)
 8000406:	4a30      	ldr	r2, [pc, #192]	; (80004c8 <lcd_init+0xe4>)
 8000408:	6952      	ldr	r2, [r2, #20]
 800040a:	2180      	movs	r1, #128	; 0x80
 800040c:	0289      	lsls	r1, r1, #10
 800040e:	430a      	orrs	r2, r1
 8000410:	615a      	str	r2, [r3, #20]
  GPIOC->MODER |= GPIO_MODER_MODER14_0;
 8000412:	4b2e      	ldr	r3, [pc, #184]	; (80004cc <lcd_init+0xe8>)
 8000414:	4a2d      	ldr	r2, [pc, #180]	; (80004cc <lcd_init+0xe8>)
 8000416:	6812      	ldr	r2, [r2, #0]
 8000418:	2180      	movs	r1, #128	; 0x80
 800041a:	0549      	lsls	r1, r1, #21
 800041c:	430a      	orrs	r2, r1
 800041e:	601a      	str	r2, [r3, #0]
  GPIOC->MODER |= GPIO_MODER_MODER15_0;
 8000420:	4b2a      	ldr	r3, [pc, #168]	; (80004cc <lcd_init+0xe8>)
 8000422:	4a2a      	ldr	r2, [pc, #168]	; (80004cc <lcd_init+0xe8>)
 8000424:	6812      	ldr	r2, [r2, #0]
 8000426:	2180      	movs	r1, #128	; 0x80
 8000428:	05c9      	lsls	r1, r1, #23
 800042a:	430a      	orrs	r2, r1
 800042c:	601a      	str	r2, [r3, #0]
  GPIOB->MODER |= GPIO_MODER_MODER8_0;
 800042e:	4b28      	ldr	r3, [pc, #160]	; (80004d0 <lcd_init+0xec>)
 8000430:	4a27      	ldr	r2, [pc, #156]	; (80004d0 <lcd_init+0xec>)
 8000432:	6812      	ldr	r2, [r2, #0]
 8000434:	2180      	movs	r1, #128	; 0x80
 8000436:	0249      	lsls	r1, r1, #9
 8000438:	430a      	orrs	r2, r1
 800043a:	601a      	str	r2, [r3, #0]
  GPIOB->MODER |= GPIO_MODER_MODER9_0;
 800043c:	4b24      	ldr	r3, [pc, #144]	; (80004d0 <lcd_init+0xec>)
 800043e:	4a24      	ldr	r2, [pc, #144]	; (80004d0 <lcd_init+0xec>)
 8000440:	6812      	ldr	r2, [r2, #0]
 8000442:	2180      	movs	r1, #128	; 0x80
 8000444:	02c9      	lsls	r1, r1, #11
 8000446:	430a      	orrs	r2, r1
 8000448:	601a      	str	r2, [r3, #0]
  GPIOA->MODER |= GPIO_MODER_MODER12_0;
 800044a:	2390      	movs	r3, #144	; 0x90
 800044c:	05db      	lsls	r3, r3, #23
 800044e:	2290      	movs	r2, #144	; 0x90
 8000450:	05d2      	lsls	r2, r2, #23
 8000452:	6812      	ldr	r2, [r2, #0]
 8000454:	2180      	movs	r1, #128	; 0x80
 8000456:	0449      	lsls	r1, r1, #17
 8000458:	430a      	orrs	r2, r1
 800045a:	601a      	str	r2, [r3, #0]
  GPIOA->MODER |= GPIO_MODER_MODER15_0;
 800045c:	2390      	movs	r3, #144	; 0x90
 800045e:	05db      	lsls	r3, r3, #23
 8000460:	2290      	movs	r2, #144	; 0x90
 8000462:	05d2      	lsls	r2, r2, #23
 8000464:	6812      	ldr	r2, [r2, #0]
 8000466:	2180      	movs	r1, #128	; 0x80
 8000468:	05c9      	lsls	r1, r1, #23
 800046a:	430a      	orrs	r2, r1
 800046c:	601a      	str	r2, [r3, #0]

  delay(30000); //allow the LCD 30 ms power up time
 800046e:	4b19      	ldr	r3, [pc, #100]	; (80004d4 <lcd_init+0xf0>)
 8000470:	0018      	movs	r0, r3
 8000472:	f000 f8e1 	bl	8000638 <delay>
  // in case in 2nd nibble of 4 bit tansfer, this goes to 1st nibble
  // if byte in 8-bit mode, keeps in 8-bit mode
  lcd_write4bits(0x03);
 8000476:	2003      	movs	r0, #3
 8000478:	f000 f878 	bl	800056c <lcd_write4bits>
  delay(4100);
 800047c:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <lcd_init+0xf4>)
 800047e:	0018      	movs	r0, r3
 8000480:	f000 f8da 	bl	8000638 <delay>
  lcd_write4bits(0x03);  // garanteed to be byte of 8-bit data for first byte of 4-bit.
 8000484:	2003      	movs	r0, #3
 8000486:	f000 f871 	bl	800056c <lcd_write4bits>
  delay(39);
 800048a:	2027      	movs	r0, #39	; 0x27
 800048c:	f000 f8d4 	bl	8000638 <delay>
  lcd_write4bits(0x03); // necessary in case this is the 2nd nibble of 4-bit transfer.
 8000490:	2003      	movs	r0, #3
 8000492:	f000 f86b 	bl	800056c <lcd_write4bits>
  delay(39);
 8000496:	2027      	movs	r0, #39	; 0x27
 8000498:	f000 f8ce 	bl	8000638 <delay>
  // switch to 4-bit. This will latch in a byte as it's garanteed to now be in 8-bit
  lcd_write4bits(0x02);
 800049c:	2002      	movs	r0, #2
 800049e:	f000 f865 	bl	800056c <lcd_write4bits>
  delay(39);
 80004a2:	2027      	movs	r0, #39	; 0x27
 80004a4:	f000 f8c8 	bl	8000638 <delay>
  lcd_command(LCD_FOUR_BIT_TWO_LINE_MODE); //0x28
 80004a8:	2028      	movs	r0, #40	; 0x28
 80004aa:	f000 f817 	bl	80004dc <lcd_command>
  lcd_command(LCD_DISPLAY_OFF); // 0x08
 80004ae:	2008      	movs	r0, #8
 80004b0:	f000 f814 	bl	80004dc <lcd_command>
  lcd_command(LCD_CLEAR_DISPLAY); // 0x01
 80004b4:	2001      	movs	r0, #1
 80004b6:	f000 f811 	bl	80004dc <lcd_command>
  lcd_command(LCD_DISPLAY_ON); // 0x0C
 80004ba:	200c      	movs	r0, #12
 80004bc:	f000 f80e 	bl	80004dc <lcd_command>
}
 80004c0:	46c0      	nop			; (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	40021000 	.word	0x40021000
 80004cc:	48000800 	.word	0x48000800
 80004d0:	48000400 	.word	0x48000400
 80004d4:	00007530 	.word	0x00007530
 80004d8:	00001004 	.word	0x00001004

080004dc <lcd_command>:

//============================================================================

void lcd_command (enum LcdCommand command) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	0002      	movs	r2, r0
 80004e4:	1dfb      	adds	r3, r7, #7
 80004e6:	701a      	strb	r2, [r3, #0]
  //This function sends a command to the LCD.
  //Care is taken not to interfere with the other lines on the port.
  lcd_put((uint8_t)command, COMMAND);
 80004e8:	1dfb      	adds	r3, r7, #7
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2100      	movs	r1, #0
 80004ee:	0018      	movs	r0, r3
 80004f0:	f000 f80a 	bl	8000508 <lcd_put>
  delay(1530); // 1.53 ms is the maximum delay we should need for any command.
 80004f4:	4b03      	ldr	r3, [pc, #12]	; (8000504 <lcd_command+0x28>)
 80004f6:	0018      	movs	r0, r3
 80004f8:	f000 f89e 	bl	8000638 <delay>
  // TODO: fix the above to have variable lengths as required by different commands.
}
 80004fc:	46c0      	nop			; (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b002      	add	sp, #8
 8000502:	bd80      	pop	{r7, pc}
 8000504:	000005fa 	.word	0x000005fa

08000508 <lcd_put>:

//============================================================================

static void lcd_put (uint8_t character, enum TypeOfCharacter ch_type) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	0002      	movs	r2, r0
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	701a      	strb	r2, [r3, #0]
 8000514:	1dbb      	adds	r3, r7, #6
 8000516:	1c0a      	adds	r2, r1, #0
 8000518:	701a      	strb	r2, [r3, #0]
    //Puts a single character on the LCD at the next position on the screen.
    //The character to be printed is in the input parameter. For numbers, letters
    //and other common characters the ASCII code will produce correct display.
    //Refer to the Hitachi HD44780 datasheet for full character set information.
    if (ch_type == TEXT) {
 800051a:	1dbb      	adds	r3, r7, #6
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b01      	cmp	r3, #1
 8000520:	d107      	bne.n	8000532 <lcd_put+0x2a>
        GPIOC->BSRR |= GPIO_BSRR_BS_14;// pull RS (PC14) high
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <lcd_put+0x60>)
 8000524:	4a10      	ldr	r2, [pc, #64]	; (8000568 <lcd_put+0x60>)
 8000526:	6992      	ldr	r2, [r2, #24]
 8000528:	2180      	movs	r1, #128	; 0x80
 800052a:	01c9      	lsls	r1, r1, #7
 800052c:	430a      	orrs	r2, r1
 800052e:	619a      	str	r2, [r3, #24]
 8000530:	e00a      	b.n	8000548 <lcd_put+0x40>
    } else if (ch_type == COMMAND) {
 8000532:	1dbb      	adds	r3, r7, #6
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d106      	bne.n	8000548 <lcd_put+0x40>
        GPIOC->BSRR |= GPIO_BSRR_BR_14;// pull RS (PC14) low
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <lcd_put+0x60>)
 800053c:	4a0a      	ldr	r2, [pc, #40]	; (8000568 <lcd_put+0x60>)
 800053e:	6992      	ldr	r2, [r2, #24]
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	05c9      	lsls	r1, r1, #23
 8000544:	430a      	orrs	r2, r1
 8000546:	619a      	str	r2, [r3, #24]
    }
    // write upper nibble
    lcd_write4bits(character >> 4);
 8000548:	1dfb      	adds	r3, r7, #7
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	091b      	lsrs	r3, r3, #4
 800054e:	b2db      	uxtb	r3, r3
 8000550:	0018      	movs	r0, r3
 8000552:	f000 f80b 	bl	800056c <lcd_write4bits>
    // write lower nibble
    lcd_write4bits(character);
 8000556:	1dfb      	adds	r3, r7, #7
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	0018      	movs	r0, r3
 800055c:	f000 f806 	bl	800056c <lcd_write4bits>
}
 8000560:	46c0      	nop			; (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	b002      	add	sp, #8
 8000566:	bd80      	pop	{r7, pc}
 8000568:	48000800 	.word	0x48000800

0800056c <lcd_write4bits>:

// This function outputs the lower 4 bits onto the data lines
static void lcd_write4bits(uint8_t character) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	0002      	movs	r2, r0
 8000574:	1dfb      	adds	r3, r7, #7
 8000576:	701a      	strb	r2, [r3, #0]
  // lower nibble to data lines
  if ((character & 0x08) != 0) {
 8000578:	1dfb      	adds	r3, r7, #7
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2208      	movs	r2, #8
 800057e:	4013      	ands	r3, r2
 8000580:	d009      	beq.n	8000596 <lcd_write4bits+0x2a>
    GPIOA->BSRR |= GPIO_BSRR_BS_15;
 8000582:	2390      	movs	r3, #144	; 0x90
 8000584:	05db      	lsls	r3, r3, #23
 8000586:	2290      	movs	r2, #144	; 0x90
 8000588:	05d2      	lsls	r2, r2, #23
 800058a:	6992      	ldr	r2, [r2, #24]
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	0209      	lsls	r1, r1, #8
 8000590:	430a      	orrs	r2, r1
 8000592:	619a      	str	r2, [r3, #24]
 8000594:	e008      	b.n	80005a8 <lcd_write4bits+0x3c>
  } else {
    GPIOA->BSRR |= GPIO_BSRR_BR_15;
 8000596:	2390      	movs	r3, #144	; 0x90
 8000598:	05db      	lsls	r3, r3, #23
 800059a:	2290      	movs	r2, #144	; 0x90
 800059c:	05d2      	lsls	r2, r2, #23
 800059e:	6992      	ldr	r2, [r2, #24]
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	0609      	lsls	r1, r1, #24
 80005a4:	430a      	orrs	r2, r1
 80005a6:	619a      	str	r2, [r3, #24]
  }
  if ((character & 0x04) != 0) {
 80005a8:	1dfb      	adds	r3, r7, #7
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2204      	movs	r2, #4
 80005ae:	4013      	ands	r3, r2
 80005b0:	d009      	beq.n	80005c6 <lcd_write4bits+0x5a>
    GPIOA->BSRR |= GPIO_BSRR_BS_12;
 80005b2:	2390      	movs	r3, #144	; 0x90
 80005b4:	05db      	lsls	r3, r3, #23
 80005b6:	2290      	movs	r2, #144	; 0x90
 80005b8:	05d2      	lsls	r2, r2, #23
 80005ba:	6992      	ldr	r2, [r2, #24]
 80005bc:	2180      	movs	r1, #128	; 0x80
 80005be:	0149      	lsls	r1, r1, #5
 80005c0:	430a      	orrs	r2, r1
 80005c2:	619a      	str	r2, [r3, #24]
 80005c4:	e008      	b.n	80005d8 <lcd_write4bits+0x6c>
  } else {
    GPIOA->BSRR |= GPIO_BSRR_BR_12;
 80005c6:	2390      	movs	r3, #144	; 0x90
 80005c8:	05db      	lsls	r3, r3, #23
 80005ca:	2290      	movs	r2, #144	; 0x90
 80005cc:	05d2      	lsls	r2, r2, #23
 80005ce:	6992      	ldr	r2, [r2, #24]
 80005d0:	2180      	movs	r1, #128	; 0x80
 80005d2:	0549      	lsls	r1, r1, #21
 80005d4:	430a      	orrs	r2, r1
 80005d6:	619a      	str	r2, [r3, #24]
  }
  if ((character & 0x02) != 0) {
 80005d8:	1dfb      	adds	r3, r7, #7
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2202      	movs	r2, #2
 80005de:	4013      	ands	r3, r2
 80005e0:	d007      	beq.n	80005f2 <lcd_write4bits+0x86>
    GPIOB->BSRR |= GPIO_BSRR_BS_9;
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <lcd_write4bits+0xc8>)
 80005e4:	4a13      	ldr	r2, [pc, #76]	; (8000634 <lcd_write4bits+0xc8>)
 80005e6:	6992      	ldr	r2, [r2, #24]
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	0089      	lsls	r1, r1, #2
 80005ec:	430a      	orrs	r2, r1
 80005ee:	619a      	str	r2, [r3, #24]
 80005f0:	e006      	b.n	8000600 <lcd_write4bits+0x94>
  } else {
    GPIOB->BSRR |= GPIO_BSRR_BR_9;
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <lcd_write4bits+0xc8>)
 80005f4:	4a0f      	ldr	r2, [pc, #60]	; (8000634 <lcd_write4bits+0xc8>)
 80005f6:	6992      	ldr	r2, [r2, #24]
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	0489      	lsls	r1, r1, #18
 80005fc:	430a      	orrs	r2, r1
 80005fe:	619a      	str	r2, [r3, #24]
  }
  if ((character & 0x01) != 0) {
 8000600:	1dfb      	adds	r3, r7, #7
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2201      	movs	r2, #1
 8000606:	4013      	ands	r3, r2
 8000608:	d007      	beq.n	800061a <lcd_write4bits+0xae>
    GPIOB->BSRR |= GPIO_BSRR_BS_8;
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <lcd_write4bits+0xc8>)
 800060c:	4a09      	ldr	r2, [pc, #36]	; (8000634 <lcd_write4bits+0xc8>)
 800060e:	6992      	ldr	r2, [r2, #24]
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	0049      	lsls	r1, r1, #1
 8000614:	430a      	orrs	r2, r1
 8000616:	619a      	str	r2, [r3, #24]
 8000618:	e006      	b.n	8000628 <lcd_write4bits+0xbc>
  } else {
    GPIOB->BSRR |= GPIO_BSRR_BR_8;
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <lcd_write4bits+0xc8>)
 800061c:	4a05      	ldr	r2, [pc, #20]	; (8000634 <lcd_write4bits+0xc8>)
 800061e:	6992      	ldr	r2, [r2, #24]
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	0449      	lsls	r1, r1, #17
 8000624:	430a      	orrs	r2, r1
 8000626:	619a      	str	r2, [r3, #24]
  }
  pulse_strobe ();
 8000628:	f000 f820 	bl	800066c <pulse_strobe>
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b002      	add	sp, #8
 8000632:	bd80      	pop	{r7, pc}
 8000634:	48000400 	.word	0x48000400

08000638 <delay>:

//============================================================================


static void delay(uint32_t microseconds) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  /* Hangs for specified number of microseconds. */
  volatile uint32_t counter = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  microseconds *= 3;
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	0013      	movs	r3, r2
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	189b      	adds	r3, r3, r2
 800064c:	607b      	str	r3, [r7, #4]
  for(; counter<microseconds; counter++) {
 800064e:	e004      	b.n	800065a <delay+0x22>
    __asm("nop");
 8000650:	46c0      	nop			; (mov r8, r8)
    __asm("nop");
 8000652:	46c0      	nop			; (mov r8, r8)
  for(; counter<microseconds; counter++) {
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	3301      	adds	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	429a      	cmp	r2, r3
 8000660:	d3f6      	bcc.n	8000650 <delay+0x18>
  }
}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b004      	add	sp, #16
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <pulse_strobe>:

static void pulse_strobe (void) {
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  //Pulse the strobe line of the LCD to indicate that data is ready.
  delay(1);
 8000670:	2001      	movs	r0, #1
 8000672:	f7ff ffe1 	bl	8000638 <delay>
  GPIOC->BSRR |= GPIO_BSRR_BS_15;// pull E (PC15) high
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <pulse_strobe+0x38>)
 8000678:	4a0a      	ldr	r2, [pc, #40]	; (80006a4 <pulse_strobe+0x38>)
 800067a:	6992      	ldr	r2, [r2, #24]
 800067c:	2180      	movs	r1, #128	; 0x80
 800067e:	0209      	lsls	r1, r1, #8
 8000680:	430a      	orrs	r2, r1
 8000682:	619a      	str	r2, [r3, #24]
  delay(1);
 8000684:	2001      	movs	r0, #1
 8000686:	f7ff ffd7 	bl	8000638 <delay>
  GPIOC->BSRR |= GPIO_BSRR_BR_15;// pull E (PC15) low
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <pulse_strobe+0x38>)
 800068c:	4a05      	ldr	r2, [pc, #20]	; (80006a4 <pulse_strobe+0x38>)
 800068e:	6992      	ldr	r2, [r2, #24]
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	0609      	lsls	r1, r1, #24
 8000694:	430a      	orrs	r2, r1
 8000696:	619a      	str	r2, [r3, #24]
  delay(1);
 8000698:	2001      	movs	r0, #1
 800069a:	f7ff ffcd 	bl	8000638 <delay>
}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	48000800 	.word	0x48000800

080006a8 <main>:
uint8_t get_mode(uint8_t);

extern void lcd_init (void);


void main(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
  int i =0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
  lcd_init(); // set up LCD lines and send initialisation commands
 80006b2:	f7ff fe97 	bl	80003e4 <lcd_init>
  lcd_command(LCD_CLEAR_DISPLAY);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f7ff ff10 	bl	80004dc <lcd_command>
  lcd_string("LED desk lights");
 80006bc:	4b30      	ldr	r3, [pc, #192]	; (8000780 <main+0xd8>)
 80006be:	0018      	movs	r0, r3
 80006c0:	f7ff fe71 	bl	80003a6 <lcd_string>
  lcd_command(LCD_GOTO_LINE_2); // go to lower line
 80006c4:	20c0      	movs	r0, #192	; 0xc0
 80006c6:	f7ff ff09 	bl	80004dc <lcd_command>
  lcd_string("V1.0");
 80006ca:	4b2e      	ldr	r3, [pc, #184]	; (8000784 <main+0xdc>)
 80006cc:	0018      	movs	r0, r3
 80006ce:	f7ff fe6a 	bl	80003a6 <lcd_string>


  init_LEDs();
 80006d2:	f7ff fd19 	bl	8000108 <init_LEDs>
  init_push_buttons();
 80006d6:	f7ff fdc7 	bl	8000268 <init_push_buttons>
  // set LEDs to outputs
  for(;;)
  {

	  mode=get_mode(mode);
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <main+0xe0>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	0018      	movs	r0, r3
 80006e0:	f000 f856 	bl	8000790 <get_mode>
 80006e4:	0003      	movs	r3, r0
 80006e6:	001a      	movs	r2, r3
 80006e8:	4b27      	ldr	r3, [pc, #156]	; (8000788 <main+0xe0>)
 80006ea:	701a      	strb	r2, [r3, #0]
	  switch(mode)
 80006ec:	4b26      	ldr	r3, [pc, #152]	; (8000788 <main+0xe0>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d012      	beq.n	800071a <main+0x72>
 80006f4:	dc02      	bgt.n	80006fc <main+0x54>
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d005      	beq.n	8000706 <main+0x5e>
		  for(; i < 65535; i++);
		  break;
	  case mode_4:
		  break;
	  default:
		  break;
 80006fa:	e040      	b.n	800077e <main+0xd6>
	  switch(mode)
 80006fc:	2b02      	cmp	r3, #2
 80006fe:	d016      	beq.n	800072e <main+0x86>
 8000700:	2b03      	cmp	r3, #3
 8000702:	d03b      	beq.n	800077c <main+0xd4>
		  break;
 8000704:	e03b      	b.n	800077e <main+0xd6>
		  light_on(white);
 8000706:	2002      	movs	r0, #2
 8000708:	f7ff fd0e 	bl	8000128 <light_on>
		  light_off(red);
 800070c:	2000      	movs	r0, #0
 800070e:	f7ff fd5b 	bl	80001c8 <light_off>
		  light_off(blue);
 8000712:	2001      	movs	r0, #1
 8000714:	f7ff fd58 	bl	80001c8 <light_off>
		  break;
 8000718:	e031      	b.n	800077e <main+0xd6>
		  light_on(white);
 800071a:	2002      	movs	r0, #2
 800071c:	f7ff fd04 	bl	8000128 <light_on>
		  light_on(red);
 8000720:	2000      	movs	r0, #0
 8000722:	f7ff fd01 	bl	8000128 <light_on>
		  light_on(blue);
 8000726:	2001      	movs	r0, #1
 8000728:	f7ff fcfe 	bl	8000128 <light_on>
		  break;
 800072c:	e027      	b.n	800077e <main+0xd6>
		  light_on(white);
 800072e:	2002      	movs	r0, #2
 8000730:	f7ff fcfa 	bl	8000128 <light_on>
		  light_on(red);
 8000734:	2000      	movs	r0, #0
 8000736:	f7ff fcf7 	bl	8000128 <light_on>
		  light_on(blue);
 800073a:	2001      	movs	r0, #1
 800073c:	f7ff fcf4 	bl	8000128 <light_on>
		  i=0;
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
		  for(; i < 65535; i++);
 8000744:	e002      	b.n	800074c <main+0xa4>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	3301      	adds	r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <main+0xe4>)
 8000750:	4293      	cmp	r3, r2
 8000752:	ddf8      	ble.n	8000746 <main+0x9e>
		  light_off(white);
 8000754:	2002      	movs	r0, #2
 8000756:	f7ff fd37 	bl	80001c8 <light_off>
		  light_off(red);
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff fd34 	bl	80001c8 <light_off>
		  light_off(blue);
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff fd31 	bl	80001c8 <light_off>
		  i=0;
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
		  for(; i < 65535; i++);
 800076a:	e002      	b.n	8000772 <main+0xca>
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3301      	adds	r3, #1
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4a05      	ldr	r2, [pc, #20]	; (800078c <main+0xe4>)
 8000776:	4293      	cmp	r3, r2
 8000778:	ddf8      	ble.n	800076c <main+0xc4>
		  break;
 800077a:	e000      	b.n	800077e <main+0xd6>
		  break;
 800077c:	46c0      	nop			; (mov r8, r8)
	  mode=get_mode(mode);
 800077e:	e7ac      	b.n	80006da <main+0x32>
 8000780:	08000948 	.word	0x08000948
 8000784:	08000958 	.word	0x08000958
 8000788:	2000001c 	.word	0x2000001c
 800078c:	0000fffe 	.word	0x0000fffe

08000790 <get_mode>:

  }
}

uint8_t get_mode(uint8_t current_mode)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	0002      	movs	r2, r0
 8000798:	1dfb      	adds	r3, r7, #7
 800079a:	701a      	strb	r2, [r3, #0]
	uint8_t new_mode=current_mode;
 800079c:	230f      	movs	r3, #15
 800079e:	18fb      	adds	r3, r7, r3
 80007a0:	1dfa      	adds	r2, r7, #7
 80007a2:	7812      	ldrb	r2, [r2, #0]
 80007a4:	701a      	strb	r2, [r3, #0]
	if(get_button_state(mode_1)==1)
 80007a6:	2000      	movs	r0, #0
 80007a8:	f7ff fdac 	bl	8000304 <get_button_state>
 80007ac:	0003      	movs	r3, r0
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d104      	bne.n	80007bc <get_mode+0x2c>
	{
		new_mode=mode_1;
 80007b2:	230f      	movs	r3, #15
 80007b4:	18fb      	adds	r3, r7, r3
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
 80007ba:	e01f      	b.n	80007fc <get_mode+0x6c>
	}
	else if(get_button_state(mode_2)==1)
 80007bc:	2001      	movs	r0, #1
 80007be:	f7ff fda1 	bl	8000304 <get_button_state>
 80007c2:	0003      	movs	r3, r0
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d104      	bne.n	80007d2 <get_mode+0x42>
	{
		new_mode=mode_2;
 80007c8:	230f      	movs	r3, #15
 80007ca:	18fb      	adds	r3, r7, r3
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
 80007d0:	e014      	b.n	80007fc <get_mode+0x6c>
	}
	else if(get_button_state(mode_3)==1)
 80007d2:	2002      	movs	r0, #2
 80007d4:	f7ff fd96 	bl	8000304 <get_button_state>
 80007d8:	0003      	movs	r3, r0
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d104      	bne.n	80007e8 <get_mode+0x58>
	{
		new_mode=mode_3;
 80007de:	230f      	movs	r3, #15
 80007e0:	18fb      	adds	r3, r7, r3
 80007e2:	2202      	movs	r2, #2
 80007e4:	701a      	strb	r2, [r3, #0]
 80007e6:	e009      	b.n	80007fc <get_mode+0x6c>
	}
	else if(get_button_state(mode_4)==1)
 80007e8:	2003      	movs	r0, #3
 80007ea:	f7ff fd8b 	bl	8000304 <get_button_state>
 80007ee:	0003      	movs	r3, r0
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d103      	bne.n	80007fc <get_mode+0x6c>
	{
		new_mode=mode_4;
 80007f4:	230f      	movs	r3, #15
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	2203      	movs	r2, #3
 80007fa:	701a      	strb	r2, [r3, #0]
	}

	return new_mode;
 80007fc:	230f      	movs	r3, #15
 80007fe:	18fb      	adds	r3, r7, r3
 8000800:	781b      	ldrb	r3, [r3, #0]
}
 8000802:	0018      	movs	r0, r3
 8000804:	46bd      	mov	sp, r7
 8000806:	b004      	add	sp, #16
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800080e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000810:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000812:	e003      	b.n	800081c <LoopCopyDataInit>

08000814 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000816:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000818:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800081a:	3104      	adds	r1, #4

0800081c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800081c:	480b      	ldr	r0, [pc, #44]	; (800084c <LoopForever+0xa>)
  ldr r3, =_edata
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <LoopForever+0xe>)
  adds r2, r0, r1
 8000820:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000822:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000824:	d3f6      	bcc.n	8000814 <CopyDataInit>
  ldr r2, =_sbss
 8000826:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <LoopForever+0x12>)
  b LoopFillZerobss
 8000828:	e002      	b.n	8000830 <LoopFillZerobss>

0800082a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  str  r3, [r2]
 800082c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800082e:	3204      	adds	r2, #4

08000830 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <LoopForever+0x16>)
  cmp r2, r3
 8000832:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000834:	d3f9      	bcc.n	800082a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000836:	f000 f813 	bl	8000860 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800083a:	f000 f855 	bl	80008e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800083e:	f7ff ff33 	bl	80006a8 <main>

08000842 <LoopForever>:

LoopForever:
    b LoopForever
 8000842:	e7fe      	b.n	8000842 <LoopForever>
  ldr   r0, =_estack
 8000844:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 8000848:	080009a8 	.word	0x080009a8
  ldr r0, =_sdata
 800084c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000850:	20000000 	.word	0x20000000
  ldr r2, =_sbss
 8000854:	20000000 	.word	0x20000000
  ldr r3, = _ebss
 8000858:	20000020 	.word	0x20000020

0800085c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800085c:	e7fe      	b.n	800085c <ADC1_COMP_IRQHandler>
	...

08000860 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <SystemInit+0x70>)
 8000866:	4a1a      	ldr	r2, [pc, #104]	; (80008d0 <SystemInit+0x70>)
 8000868:	6812      	ldr	r2, [r2, #0]
 800086a:	2101      	movs	r1, #1
 800086c:	430a      	orrs	r2, r1
 800086e:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <SystemInit+0x70>)
 8000872:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <SystemInit+0x70>)
 8000874:	6852      	ldr	r2, [r2, #4]
 8000876:	4917      	ldr	r1, [pc, #92]	; (80008d4 <SystemInit+0x74>)
 8000878:	400a      	ands	r2, r1
 800087a:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <SystemInit+0x70>)
 800087e:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <SystemInit+0x70>)
 8000880:	6812      	ldr	r2, [r2, #0]
 8000882:	4915      	ldr	r1, [pc, #84]	; (80008d8 <SystemInit+0x78>)
 8000884:	400a      	ands	r2, r1
 8000886:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <SystemInit+0x70>)
 800088a:	4a11      	ldr	r2, [pc, #68]	; (80008d0 <SystemInit+0x70>)
 800088c:	6812      	ldr	r2, [r2, #0]
 800088e:	4913      	ldr	r1, [pc, #76]	; (80008dc <SystemInit+0x7c>)
 8000890:	400a      	ands	r2, r1
 8000892:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <SystemInit+0x70>)
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <SystemInit+0x70>)
 8000898:	6852      	ldr	r2, [r2, #4]
 800089a:	4911      	ldr	r1, [pc, #68]	; (80008e0 <SystemInit+0x80>)
 800089c:	400a      	ands	r2, r1
 800089e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <SystemInit+0x70>)
 80008a2:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <SystemInit+0x70>)
 80008a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80008a6:	210f      	movs	r1, #15
 80008a8:	438a      	bics	r2, r1
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <SystemInit+0x70>)
 80008ae:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <SystemInit+0x70>)
 80008b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80008b2:	490c      	ldr	r1, [pc, #48]	; (80008e4 <SystemInit+0x84>)
 80008b4:	400a      	ands	r2, r1
 80008b6:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <SystemInit+0x70>)
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <SystemInit+0x70>)
 80008bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80008be:	2101      	movs	r1, #1
 80008c0:	438a      	bics	r2, r1
 80008c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80008c4:	4b02      	ldr	r3, [pc, #8]	; (80008d0 <SystemInit+0x70>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]

}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40021000 	.word	0x40021000
 80008d4:	f8ffb80c 	.word	0xf8ffb80c
 80008d8:	fef6ffff 	.word	0xfef6ffff
 80008dc:	fffbffff 	.word	0xfffbffff
 80008e0:	ffc0ffff 	.word	0xffc0ffff
 80008e4:	fffffeac 	.word	0xfffffeac

080008e8 <__libc_init_array>:
 80008e8:	b570      	push	{r4, r5, r6, lr}
 80008ea:	2600      	movs	r6, #0
 80008ec:	4d0c      	ldr	r5, [pc, #48]	; (8000920 <__libc_init_array+0x38>)
 80008ee:	4c0d      	ldr	r4, [pc, #52]	; (8000924 <__libc_init_array+0x3c>)
 80008f0:	1b64      	subs	r4, r4, r5
 80008f2:	10a4      	asrs	r4, r4, #2
 80008f4:	42a6      	cmp	r6, r4
 80008f6:	d109      	bne.n	800090c <__libc_init_array+0x24>
 80008f8:	2600      	movs	r6, #0
 80008fa:	f000 f819 	bl	8000930 <_init>
 80008fe:	4d0a      	ldr	r5, [pc, #40]	; (8000928 <__libc_init_array+0x40>)
 8000900:	4c0a      	ldr	r4, [pc, #40]	; (800092c <__libc_init_array+0x44>)
 8000902:	1b64      	subs	r4, r4, r5
 8000904:	10a4      	asrs	r4, r4, #2
 8000906:	42a6      	cmp	r6, r4
 8000908:	d105      	bne.n	8000916 <__libc_init_array+0x2e>
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	00b3      	lsls	r3, r6, #2
 800090e:	58eb      	ldr	r3, [r5, r3]
 8000910:	4798      	blx	r3
 8000912:	3601      	adds	r6, #1
 8000914:	e7ee      	b.n	80008f4 <__libc_init_array+0xc>
 8000916:	00b3      	lsls	r3, r6, #2
 8000918:	58eb      	ldr	r3, [r5, r3]
 800091a:	4798      	blx	r3
 800091c:	3601      	adds	r6, #1
 800091e:	e7f2      	b.n	8000906 <__libc_init_array+0x1e>
 8000920:	080009a0 	.word	0x080009a0
 8000924:	080009a0 	.word	0x080009a0
 8000928:	080009a0 	.word	0x080009a0
 800092c:	080009a4 	.word	0x080009a4

08000930 <_init>:
 8000930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000936:	bc08      	pop	{r3}
 8000938:	469e      	mov	lr, r3
 800093a:	4770      	bx	lr

0800093c <_fini>:
 800093c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000942:	bc08      	pop	{r3}
 8000944:	469e      	mov	lr, r3
 8000946:	4770      	bx	lr
